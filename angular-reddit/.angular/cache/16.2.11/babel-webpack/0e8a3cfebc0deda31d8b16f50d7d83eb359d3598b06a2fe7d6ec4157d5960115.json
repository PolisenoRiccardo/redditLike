{"ast":null,"code":"export class Article {\n  constructor(title, link, votes) {\n    this.title = title;\n    this.link = link;\n    this.votes = votes || 0;\n  }\n  voteUp() {\n    this.votes += 1;\n  }\n  voteDown() {\n    this.votes -= 1;\n  }\n  // domain() is a utility function that extracts\n  // the domain from a URL, which we'll explain shortly\n  domain() {\n    try {\n      // e.g. http://foo.com/path/to/bar\n      const domainAndPath = this.link.split('//')[1]; // e.g. foo.com/path/to/bar\n      return domainAndPath.split('/')[0];\n    } catch (err) {\n      return null;\n    }\n  }\n}","map":{"version":3,"names":["Article","constructor","title","link","votes","voteUp","voteDown","domain","domainAndPath","split","err"],"sources":["/workspace/redditLike/angular-reddit/src/app/article/article.model.ts"],"sourcesContent":["export class Article {\n    title: string;\n    link: string;\n    votes: number;\n  \n    constructor(title: string, link: string, votes?: number) {\n      this.title = title;\n      this.link = link;\n      this.votes = votes || 0;\n    }\n    voteUp(): void {\n      this.votes += 1;\n    }\n  \n    voteDown(): void {\n      this.votes -= 1;\n    }\n  \n    // domain() is a utility function that extracts\n    // the domain from a URL, which we'll explain shortly\n    domain(): string | null {\n      try {// e.g. http://foo.com/path/to/bar\n        const domainAndPath: string = this.link.split('//')[1]; // e.g. foo.com/path/to/bar\n        return domainAndPath.split('/')[0];\n      } catch (err) {\n        return null;\n      }\n    }\n  }"],"mappings":"AAAA,OAAM,MAAOA,OAAO;EAKhBC,YAAYC,KAAa,EAAEC,IAAY,EAAEC,KAAc;IACrD,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAI,CAAC;EACzB;EACAC,MAAMA,CAAA;IACJ,IAAI,CAACD,KAAK,IAAI,CAAC;EACjB;EAEAE,QAAQA,CAAA;IACN,IAAI,CAACF,KAAK,IAAI,CAAC;EACjB;EAEA;EACA;EACAG,MAAMA,CAAA;IACJ,IAAI;MAAC;MACH,MAAMC,aAAa,GAAW,IAAI,CAACL,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxD,OAAOD,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACnC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO,IAAI;;EAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}